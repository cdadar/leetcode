#+TITLE:21.合并两个有序链表
* 21. 合并两个有序链表
** 题目描述
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个
链表的所有节点组成的。

示例：
#+begin_example
输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

#+end_example


** 题解

遍历两个链表,比较每一个元素,将小的值传入到结构列表中
#+BEGIN_SRC java
  public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
      ListNode result = new ListNode(0);
      ListNode current = result;
      while (l1 != null || l2 != null) {
          if (l1 == null) {
              current.next = new ListNode(l2.val);
              l2 = l2.next;

          } else if (l2 == null || l1.val < l2.val) {
              current.next = new ListNode(l1.val);
              l1 = l1.next;
          } else {
              current.next = new ListNode(l2.val);
              l2 = l2.next;
          }
          current = current.next;
      }
      return result.next;
  }

#+END_SRC


递归版本

这道题可以使用递归实现，新链表也不需要构造新节点，我们下面列举递归三个要素
- 终止条件：两条链表分别名为 l1 和 l2，当 l1 为空或 l2 为空时结束
- 返回值：每一层调用都返回排序好的链表头
- 本级递归内容：如果 l1 的 val 值更小，则将 l1.next 与排序好的链表头相
  接，l2 同理O(m+n)O(m+n)，mm 为 l1的长度，nn 为 l2 的长度


#+BEGIN_SRC java
  public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
      if(l1 == null) {
          return l2;
      }
      if(l2 == null) {
          return l1;
      }

      if(l1.val < l2.val) {
          l1.next = mergeTwoLists(l1.next, l2);
          return l1;
      } else {
          l2.next = mergeTwoLists(l1, l2.next);
          return l2;
      }
  }

#+END_SRC
