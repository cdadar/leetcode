#+TITLE: 电话号码的字母组合
*  电话号码的字母合组
** 题目描述
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。


#+attr_html: :width 500px
#+attr_latex: :width 500px
#+ATTR_ORG: :width 500
[[http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png]]

示例:

#+begin_example
输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
 #+end_example


说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。
** 题解
1. 建立数据字典
2. 每一次添加一个字母,把之前已经添加过的作为一个整体，再和新添加的字母
   组合， 新的组合的第一组把之前的组合覆盖(仅用1ms)
#+BEGIN_SRC java
class Solution {
     public List<String> letterCombinations(String digits) {
       Map<String, List<String>> dicts = new HashMap<>();
    dicts.put("2", Arrays.asList("a", "b", "c"));
    dicts.put("3", Arrays.asList("d", "e", "f"));
    dicts.put("4", Arrays.asList("g", "h", "i"));
    dicts.put("5", Arrays.asList("j", "k", "l"));
    dicts.put("6", Arrays.asList("m", "n", "o"));
    dicts.put("7", Arrays.asList("p", "q", "r", "s"));
    dicts.put("8", Arrays.asList("t", "u", "v"));
    dicts.put("9", Arrays.asList("w", "x", "y", "z"));

    List<String> ans = new ArrayList<>();

    for (int i = 0; i < digits.length(); i++) {//对每个digits遍历
      int len = ans.size();
      List<String> subStr = dicts.get(String.valueOf(digits.charAt(i)));
      if (len == 0) {
        for (int j = 0; j < subStr.size(); j++) {
          ans.add("" + subStr.get(j));//第一次不用覆盖，直接加
        }
      } else {
        for (int k = 0; k < len; k++) {
          for (int m = 1; m < subStr.size(); m++) {
            ans.add(ans.get(k) + subStr.get(m));//加入除了第一组的其他组合
          }
          ans.set(k, (ans.get(k) + subStr.get(0)));//用第一组组合覆盖之前的低维组合
        }
      }
    }
    return ans;

  }
}

#+END_SRC
