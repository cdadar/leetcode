#+TITLE:有效的括号
* 有效的括号
** 题目描述

给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。


示例 1:
#+begin_example
输入: "()"
输出: true

 #+end_example


示例 2:

#+begin_example
输入: "()[]{}"
输出: true
#+end_example


示例 3:

#+begin_example
输入: "(]"
输出: false
#+end_example

示例 4:

#+begin_example
输入: "([)]"
输出: false
#+end_example


示例 5:
#+begin_example
输入: "{[]}"
输出: true
#+end_example


** 题解

1. 将左边的推入到栈中
2. 遇到右边的符号，将栈顶中的数据判断是否匹配
3. 不匹配返回 =false= ，匹配继续

#+BEGIN_SRC java
class Solution {

    public static boolean isValid(String s) {

        Map<Character, Character> data = new HashMap<>();
        data.put('(', ')');
        data.put('[', ']');
        data.put('{', '}');
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (data.keySet().contains(s.charAt(i))) {
                stack.push(s.charAt(i));
            } else {
                int finalI = i;
                Character temp = data.entrySet().stream().filter(entry -> entry.getValue().equals(s.charAt(finalI))).findFirst().map(entry -> entry.getKey()).orElse(null);
                if (stack.isEmpty() || !stack.pop().equals(temp)) {
                    return false;
                }
            }
        }

        if (stack.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }

    public static void main(String[] args) {
        System.out.println(Solution.isValid("{"));
    }
}

#+END_SRC
