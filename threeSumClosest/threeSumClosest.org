#+TITLE:16. 最接近的三数之和
* 题目描述
给定一个包括 =n= 个整数的数组 =nums= 和 一个目标值 =target= 。找出 =nums= 中的
三个整数，使得它们的和与 =target= 最接近。返回这三个数的和。假定每组输入
只存在唯一答案。
#+begin_example
给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).
#+end_example
* 题解
1. 排序，遍历，双指针，O(N^2) 时间复杂度，二分法初始化
2. 排序是为了使用双指针，首先遍历得到索引 c，然后计算 c，左指针 i，右
   指针 j 对应数字之和，如果大于 target，j 向内移动，否则 i 向内移动
3. i 的初始值不是 c + 1，是为了减少计算量，用二分法得到一个合


#+BEGIN_SRC java
import java.util.Arrays;

/**
 * @author chens
 * @date 5/12/19
 */
class Solution {

  public int threeSumClosest(int[] nums, int target) {
    // 排序
    Arrays.sort(nums);
    int closestNum = nums[0] + nums[1] + nums[2];
    for (int c = 0; c < nums.length - 2; c++) {
      int i = c + 1, j = nums.length - 1;
      while (i < j) {
        int threeSum = nums[i] + nums[j] + nums[c];
        if (Math.abs(threeSum - target) < Math.abs(closestNum - target)) {
          closestNum = threeSum;
        }
        if (threeSum > target) {
          j--;
        } else if (threeSum < target) {
          i++;
        } else {
          // 如果已经等于target的话, 肯定是最接近的
          return target;
        }

      }

    }

    return closestNum;
  }
}



#+END_SRC
